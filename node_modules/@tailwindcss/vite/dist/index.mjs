import{compile as U,env as v,Features as w,normalizePath as D}from"@tailwindcss/node";import{clearRequireCache as F}from"@tailwindcss/node/require-cache";import{Scanner as B}from"@tailwindcss/oxide";import{Features as x,transform as G}from"lightningcss";import A from"node:fs/promises";import b from"node:path";import{sveltePreprocess as M}from"svelte-preprocess";var V=/[?&](raw|url)\b/;function q(){let o=[],e=null,l=!1,a=!1,f=new C(()=>new Set),p=new B({}),n=new C(t=>{let r=e.createResolver({...e.resolve,extensions:[".css"],mainFields:["style"],conditions:["style","development|production"],tryIndex:!1,preferRelative:!0});function s(c,m){return r(c,m,!1,l)}let u=e.createResolver(e.resolve);function i(c,m){return u(c,m,!0,l)}return new P(t,()=>f,e.base,s,i)});function d(t,r,s,u){let i=!1;for(let c of p.scanFiles([{content:r,extension:s}]))i=!0,f.get(t).add(c);i&&g(u)}function g(t){for(let r of o){let s=[];for(let[u,i]of n.entries()){let c=r.moduleGraph.getModuleById(u);if(!c){if(i.builtBeforeTransform)continue;t||n.delete(u);continue}n.get(u).requiresRebuild=!1,r.moduleGraph.invalidateModule(c),s.push({type:`${c.type}-update`,path:c.url,acceptedPath:c.url,timestamp:Date.now()})}s.length>0&&r.hot.send({type:"update",updates:s})}}async function h(t,r){let s=t.lastContent,u=await t.generate(s,r);if(u===!1)return;v.DEBUG&&console.time("[@tailwindcss/vite] Optimize CSS");let i=I(u,{minify:a});return v.DEBUG&&console.timeEnd("[@tailwindcss/vite] Optimize CSS"),i}async function S(t,r,s){let u={...t,getCombinedSourcemap:()=>{throw new Error("getCombinedSourcemap not implemented")}};for(let i of e.plugins){if(!i.transform||i.name.startsWith("@tailwindcss/"))continue;if(i.name.startsWith("vite:")&&i.name!=="vite:css"&&i.name!=="vite:css-post"&&i.name!=="vite:vue")continue;if(i.name==="ssr-styles")continue;let c="handler"in i.transform?i.transform.handler:i.transform;try{let m=await c.call(u,s,r);if(!m)continue;typeof m=="string"?s=m:m.code&&(s=m.code)}catch{console.error(`Error running ${i.name} on Tailwind CSS output. Skipping.`)}}return s}return[W(n),{name:"@tailwindcss/vite:scan",enforce:"pre",configureServer(t){o.push(t)},async configResolved(t){e=t,a=e.build.cssMinify!==!1,l=e.build.ssr!==!1&&e.build.ssr!==void 0},transformIndexHtml(t,{path:r}){d(r,t,"html",l)},transform(t,r,s){let u=E(r);R(r)||d(r,t,u,s?.ssr??!1)}},{name:"@tailwindcss/vite:generate:serve",apply:"serve",enforce:"pre",async transform(t,r,s){if(!R(r))return;let u=n.get(r);if(u.builtBeforeTransform&&(u.builtBeforeTransform.forEach(c=>this.addWatchFile(c)),u.builtBeforeTransform=void 0),y(r))return t;s?.ssr||await Promise.all(o.map(c=>c.waitForRequestsIdle(r)));let i=await u.generate(t,c=>this.addWatchFile(c));return i?{code:i}:(n.delete(r),t)}},{name:"@tailwindcss/vite:generate:build",apply:"build",enforce:"pre",async transform(t,r){if(!R(r))return;let s=n.get(r);if(s.builtBeforeTransform&&(s.builtBeforeTransform.forEach(i=>this.addWatchFile(i)),s.builtBeforeTransform=void 0),y(r))return t;let u=await s.generate(t,i=>this.addWatchFile(i));return u?{code:u}:(n.delete(r),t)},async renderStart(){for(let[t,r]of n.entries()){if(y(t))continue;let s=await h(r,()=>{});if(!s){n.delete(t);continue}await S(this,t,s)}}}]}function E(o){let[e]=o.split("?",2);return b.extname(e).slice(1)}function R(o){if(o.includes("/.vite/"))return;let e=E(o);return(e==="css"||e==="vue"&&o.includes("&lang.css")||e==="astro"&&o.includes("&lang.css")||y(o))&&!V.test(o)}function y(o){return E(o)==="svelte"&&o.includes("&lang.css")}function I(o,{file:e="input.css",minify:l=!1}={}){function a(f){return G({filename:e,code:f,minify:l,sourceMap:!1,drafts:{customMedia:!0},nonStandard:{deepSelectorCombinator:!0},include:x.Nesting,exclude:x.LogicalProperties,targets:{safari:16<<16|1024,ios_saf:16<<16|1024,firefox:8388608,chrome:7864320},errorRecovery:!0}).code}return a(a(Buffer.from(o))).toString()}function T(o){return b.resolve(o.replace(/\?.*$/,""))}var C=class extends Map{constructor(l){super();this.factory=l}get(l){let a=super.get(l);return a===void 0&&(a=this.factory(l,this),this.set(l,a)),a}},P=class{constructor(e,l,a,f,p){this.id=e;this.getSharedCandidates=l;this.base=a;this.customCssResolver=f;this.customJsResolver=p}lastContent="";builtBeforeTransform;compiler;requiresRebuild=!0;scanner;candidates=new Set;dependencies=new Set;basePath=null;overwriteCandidates=null;async generate(e,l){this.lastContent=e;let a=T(this.id),f=b.dirname(b.resolve(a));if(!this.compiler||!this.scanner||this.requiresRebuild){F(Array.from(this.dependencies)),this.dependencies=new Set([T(a)]),v.DEBUG&&console.time("[@tailwindcss/vite] Setup compiler"),this.compiler=await U(e,{base:f,shouldRewriteUrls:!0,onDependency:d=>{l(d),this.dependencies.add(d)},customCssResolver:this.customCssResolver,customJsResolver:this.customJsResolver}),v.DEBUG&&console.timeEnd("[@tailwindcss/vite] Setup compiler");let n=(this.compiler.root==="none"?[]:this.compiler.root===null?[]:[this.compiler.root]).concat(this.compiler.globs);this.scanner=new B({sources:n})}if(!(this.compiler.features&(w.AtApply|w.JsPluginCompat|w.ThemeFunction|w.Utilities)))return!1;if(!this.overwriteCandidates||this.compiler.features&w.Utilities){v.DEBUG&&console.time("[@tailwindcss/vite] Scan for candidates");for(let n of this.scanner.scan())this.candidates.add(n);v.DEBUG&&console.timeEnd("[@tailwindcss/vite] Scan for candidates")}if(this.compiler.features&w.Utilities){for(let n of this.scanner.files)l(n);for(let n of this.scanner.globs){if(n.pattern[0]==="!")continue;let d=b.relative(this.base,n.base);d[0]!=="."&&(d="./"+d),d=D(d),l(b.posix.join(d,n.pattern));let g=this.compiler.root;if(g!=="none"&&g!==null){let h=D(b.resolve(g.base,g.pattern));if(!await A.stat(h).then(t=>t.isDirectory(),()=>!1))throw new Error(`The path given to \`source(\u2026)\` must be a directory but got \`source(${h})\` instead.`);this.basePath=h}else g===null&&(this.basePath=null)}}this.requiresRebuild=!0,v.DEBUG&&console.time("[@tailwindcss/vite] Build CSS");let p=this.compiler.build(this.overwriteCandidates?this.overwriteCandidates:[...this.sharedCandidates(),...this.candidates]);return v.DEBUG&&console.timeEnd("[@tailwindcss/vite] Build CSS"),p}sharedCandidates(){if(!this.compiler)return new Set;if(this.compiler.root==="none")return new Set;let e=/^[A-Z]:/,l=f=>this.basePath===null||f.startsWith(this.basePath)?!0:e.test(f)?!1:!f.startsWith("/"),a=new Set;for(let[f,p]of this.getSharedCandidates())if(l(f))for(let n of p)a.add(n);return a}};function W(o){let e=M();return{name:"@tailwindcss/svelte",api:{sveltePreprocess:{markup:e.markup,script:e.script,async style({content:l,filename:a,markup:f,...p}){if(!a)return e.style?.({...p,content:l,filename:a,markup:f});let n=a+"?svelte&type=style&lang.css",d=o.get(n);d.requiresRebuild=!0,d.builtBeforeTransform=[];let g=new B({});d.overwriteCandidates=g.scanFiles([{content:f,file:a,extension:"svelte"}]);let h=await d.generate(l,S=>d?.builtBeforeTransform?.push(S));return h?e.style?.({...p,content:h,filename:a,markup:f}):(o.delete(n),e.style?.({...p,content:l,filename:a,markup:f}))}}}}}export{q as default};
